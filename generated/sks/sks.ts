// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class sks__welcomeResult {
  value0: Address;
  value1: boolean;
  value2: Address;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: boolean,
    value2: Address,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getFriend1(): Address {
    return this.value0;
  }

  getMintfriend1(): boolean {
    return this.value1;
  }

  getFriend2(): Address {
    return this.value2;
  }

  getMintfriend2(): boolean {
    return this.value3;
  }

  getMoney(): BigInt {
    return this.value4;
  }
}

export class sks__welcome_PRResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMoney(): BigInt {
    return this.value0;
  }

  getListed(): BigInt {
    return this.value1;
  }

  getMinted(): BigInt {
    return this.value2;
  }
}

export class sks extends ethereum.SmartContract {
  static bind(address: Address): sks {
    return new sks("sks", address);
  }

  PR(param0: BigInt): Address {
    let result = super.call("PR", "PR(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_PR(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("PR", "PR(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PR_exp_air(_address: Address): BigInt {
    let result = super.call("PR_exp_air", "PR_exp_air(address):(uint256)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBigInt();
  }

  try_PR_exp_air(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PR_exp_air", "PR_exp_air(address):(uint256)", [
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PR_payable(): BigInt {
    let result = super.call("PR_payable", "PR_payable():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PR_payable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PR_payable", "PR_payable():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressMintedBalance(param0: Address): BigInt {
    let result = super.call(
      "addressMintedBalance",
      "addressMintedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressMintedBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressMintedBalance",
      "addressMintedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseExtension(): string {
    let result = super.call("baseExtension", "baseExtension():(string)", []);

    return result[0].toString();
  }

  try_baseExtension(): ethereum.CallResult<string> {
    let result = super.tryCall("baseExtension", "baseExtension():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  cost(): BigInt {
    let result = super.call("cost", "cost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cost", "cost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countPR(PRcount: Address): BigInt {
    let result = super.call("countPR", "countPR(address):(uint256)", [
      ethereum.Value.fromAddress(PRcount)
    ]);

    return result[0].toBigInt();
  }

  try_countPR(PRcount: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("countPR", "countPR(address):(uint256)", [
      ethereum.Value.fromAddress(PRcount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  discoclub(param0: Address): Address {
    let result = super.call("discoclub", "discoclub(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_discoclub(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("discoclub", "discoclub(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inviter(param0: Address): Address {
    let result = super.call("inviter", "inviter(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_inviter(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("inviter", "inviter(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPR(user: Address): boolean {
    let result = super.call("isPR", "isPR(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isPR(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPR", "isPR(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(_user: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxMintAmount(): BigInt {
    let result = super.call("maxMintAmount", "maxMintAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintAmount",
      "maxMintAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(param0: BigInt): Address {
    let result = super.call("minter", "minter(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_minter(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  n_PR(): BigInt {
    let result = super.call("n_PR", "n_PR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_n_PR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("n_PR", "n_PR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  n_minter(): BigInt {
    let result = super.call("n_minter", "n_minter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_n_minter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("n_minter", "n_minter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  n_whitelisted(): BigInt {
    let result = super.call("n_whitelisted", "n_whitelisted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_n_whitelisted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "n_whitelisted",
      "n_whitelisted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftPerAddressLimit(): BigInt {
    let result = super.call(
      "nftPerAddressLimit",
      "nftPerAddressLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nftPerAddressLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftPerAddressLimit",
      "nftPerAddressLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftPerPRLimit(): BigInt {
    let result = super.call("nftPerPRLimit", "nftPerPRLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftPerPRLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftPerPRLimit",
      "nftPerPRLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  notRevealedUri(): string {
    let result = super.call("notRevealedUri", "notRevealedUri():(string)", []);

    return result[0].toString();
  }

  try_notRevealedUri(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "notRevealedUri",
      "notRevealedUri():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onlyWhitelisted(): boolean {
    let result = super.call("onlyWhitelisted", "onlyWhitelisted():(bool)", []);

    return result[0].toBoolean();
  }

  try_onlyWhitelisted(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyWhitelisted",
      "onlyWhitelisted():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ref_rew(): BigInt {
    let result = super.call("ref_rew", "ref_rew():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ref_rew(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ref_rew", "ref_rew():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revealed(): boolean {
    let result = super.call("revealed", "revealed():(bool)", []);

    return result[0].toBoolean();
  }

  try_revealed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("revealed", "revealed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  singleviewPR(PR_: Address, num: BigInt): Address {
    let result = super.call(
      "singleviewPR",
      "singleviewPR(address,uint256):(address)",
      [ethereum.Value.fromAddress(PR_), ethereum.Value.fromUnsignedBigInt(num)]
    );

    return result[0].toAddress();
  }

  try_singleviewPR(PR_: Address, num: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "singleviewPR",
      "singleviewPR(address,uint256):(address)",
      [ethereum.Value.fromAddress(PR_), ethereum.Value.fromUnsignedBigInt(num)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewPRlisted(PR_: Address): Array<Address> {
    let result = super.call(
      "viewPRlisted",
      "viewPRlisted(address):(address[])",
      [ethereum.Value.fromAddress(PR_)]
    );

    return result[0].toAddressArray();
  }

  try_viewPRlisted(PR_: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "viewPRlisted",
      "viewPRlisted(address):(address[])",
      [ethereum.Value.fromAddress(PR_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  view_bank(): Address {
    let result = super.call("view_bank", "view_bank():(address)", []);

    return result[0].toAddress();
  }

  try_view_bank(): ethereum.CallResult<Address> {
    let result = super.tryCall("view_bank", "view_bank():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  view_bank2(): Address {
    let result = super.call("view_bank2", "view_bank2():(address)", []);

    return result[0].toAddress();
  }

  try_view_bank2(): ethereum.CallResult<Address> {
    let result = super.tryCall("view_bank2", "view_bank2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewmint(pr: Address, whi: Address): boolean {
    let result = super.call("viewmint", "viewmint(address,address):(bool)", [
      ethereum.Value.fromAddress(pr),
      ethereum.Value.fromAddress(whi)
    ]);

    return result[0].toBoolean();
  }

  try_viewmint(pr: Address, whi: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("viewmint", "viewmint(address,address):(bool)", [
      ethereum.Value.fromAddress(pr),
      ethereum.Value.fromAddress(whi)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  walletOfOwner(_owner: Address): Array<BigInt> {
    let result = super.call(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_walletOfOwner(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  welcome(param0: Address): sks__welcomeResult {
    let result = super.call(
      "welcome",
      "welcome(address):(address,bool,address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new sks__welcomeResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_welcome(param0: Address): ethereum.CallResult<sks__welcomeResult> {
    let result = super.tryCall(
      "welcome",
      "welcome(address):(address,bool,address,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new sks__welcomeResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }

  welcome_PR(param0: Address): sks__welcome_PRResult {
    let result = super.call(
      "welcome_PR",
      "welcome_PR(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new sks__welcome_PRResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_welcome_PR(param0: Address): ethereum.CallResult<sks__welcome_PRResult> {
    let result = super.tryCall(
      "welcome_PR",
      "welcome_PR(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new sks__welcome_PRResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  whitelist(param0: BigInt): Address {
    let result = super.call("whitelist", "whitelist(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_whitelist(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("whitelist", "whitelist(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelistedAddresses(param0: BigInt): Address {
    let result = super.call(
      "whitelistedAddresses",
      "whitelistedAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_whitelistedAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistedAddresses",
      "whitelistedAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _initBaseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _initNotRevealedUri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get temp_ref_rew(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _PR(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class PR_airdropCall extends ethereum.Call {
  get inputs(): PR_airdropCall__Inputs {
    return new PR_airdropCall__Inputs(this);
  }

  get outputs(): PR_airdropCall__Outputs {
    return new PR_airdropCall__Outputs(this);
  }
}

export class PR_airdropCall__Inputs {
  _call: PR_airdropCall;

  constructor(call: PR_airdropCall) {
    this._call = call;
  }
}

export class PR_airdropCall__Outputs {
  _call: PR_airdropCall;

  constructor(call: PR_airdropCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get ID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangePRCall extends ethereum.Call {
  get inputs(): ChangePRCall__Inputs {
    return new ChangePRCall__Inputs(this);
  }

  get outputs(): ChangePRCall__Outputs {
    return new ChangePRCall__Outputs(this);
  }
}

export class ChangePRCall__Inputs {
  _call: ChangePRCall;

  constructor(call: ChangePRCall) {
    this._call = call;
  }

  get PR_pos(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPR(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangePRCall__Outputs {
  _call: ChangePRCall;

  constructor(call: ChangePRCall) {
    this._call = call;
  }
}

export class Change_N_PRCall extends ethereum.Call {
  get inputs(): Change_N_PRCall__Inputs {
    return new Change_N_PRCall__Inputs(this);
  }

  get outputs(): Change_N_PRCall__Outputs {
    return new Change_N_PRCall__Outputs(this);
  }
}

export class Change_N_PRCall__Inputs {
  _call: Change_N_PRCall;

  constructor(call: Change_N_PRCall) {
    this._call = call;
  }

  get new_N_PR(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Change_N_PRCall__Outputs {
  _call: Change_N_PRCall;

  constructor(call: Change_N_PRCall) {
    this._call = call;
  }
}

export class Change_N_WHITELISTCall extends ethereum.Call {
  get inputs(): Change_N_WHITELISTCall__Inputs {
    return new Change_N_WHITELISTCall__Inputs(this);
  }

  get outputs(): Change_N_WHITELISTCall__Outputs {
    return new Change_N_WHITELISTCall__Outputs(this);
  }
}

export class Change_N_WHITELISTCall__Inputs {
  _call: Change_N_WHITELISTCall;

  constructor(call: Change_N_WHITELISTCall) {
    this._call = call;
  }

  get new_n_whitelisted(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Change_N_WHITELISTCall__Outputs {
  _call: Change_N_WHITELISTCall;

  constructor(call: Change_N_WHITELISTCall) {
    this._call = call;
  }
}

export class Change_ref_rewardCall extends ethereum.Call {
  get inputs(): Change_ref_rewardCall__Inputs {
    return new Change_ref_rewardCall__Inputs(this);
  }

  get outputs(): Change_ref_rewardCall__Outputs {
    return new Change_ref_rewardCall__Outputs(this);
  }
}

export class Change_ref_rewardCall__Inputs {
  _call: Change_ref_rewardCall;

  constructor(call: Change_ref_rewardCall) {
    this._call = call;
  }

  get new_reward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Change_ref_rewardCall__Outputs {
  _call: Change_ref_rewardCall;

  constructor(call: Change_ref_rewardCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get whitelisted1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get whitelisted2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class Renew_whitelistUserCall extends ethereum.Call {
  get inputs(): Renew_whitelistUserCall__Inputs {
    return new Renew_whitelistUserCall__Inputs(this);
  }

  get outputs(): Renew_whitelistUserCall__Outputs {
    return new Renew_whitelistUserCall__Outputs(this);
  }
}

export class Renew_whitelistUserCall__Inputs {
  _call: Renew_whitelistUserCall;

  constructor(call: Renew_whitelistUserCall) {
    this._call = call;
  }

  get _users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class Renew_whitelistUserCall__Outputs {
  _call: Renew_whitelistUserCall;

  constructor(call: Renew_whitelistUserCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class Retire_rewardCall extends ethereum.Call {
  get inputs(): Retire_rewardCall__Inputs {
    return new Retire_rewardCall__Inputs(this);
  }

  get outputs(): Retire_rewardCall__Outputs {
    return new Retire_rewardCall__Outputs(this);
  }
}

export class Retire_rewardCall__Inputs {
  _call: Retire_rewardCall;

  constructor(call: Retire_rewardCall) {
    this._call = call;
  }
}

export class Retire_rewardCall__Outputs {
  _call: Retire_rewardCall;

  constructor(call: Retire_rewardCall) {
    this._call = call;
  }
}

export class RevealCall extends ethereum.Call {
  get inputs(): RevealCall__Inputs {
    return new RevealCall__Inputs(this);
  }

  get outputs(): RevealCall__Outputs {
    return new RevealCall__Outputs(this);
  }
}

export class RevealCall__Inputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }
}

export class RevealCall__Outputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseExtensionCall extends ethereum.Call {
  get inputs(): SetBaseExtensionCall__Inputs {
    return new SetBaseExtensionCall__Inputs(this);
  }

  get outputs(): SetBaseExtensionCall__Outputs {
    return new SetBaseExtensionCall__Outputs(this);
  }
}

export class SetBaseExtensionCall__Inputs {
  _call: SetBaseExtensionCall;

  constructor(call: SetBaseExtensionCall) {
    this._call = call;
  }

  get _newBaseExtension(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseExtensionCall__Outputs {
  _call: SetBaseExtensionCall;

  constructor(call: SetBaseExtensionCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetCostCall extends ethereum.Call {
  get inputs(): SetCostCall__Inputs {
    return new SetCostCall__Inputs(this);
  }

  get outputs(): SetCostCall__Outputs {
    return new SetCostCall__Outputs(this);
  }
}

export class SetCostCall__Inputs {
  _call: SetCostCall;

  constructor(call: SetCostCall) {
    this._call = call;
  }

  get _newCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCostCall__Outputs {
  _call: SetCostCall;

  constructor(call: SetCostCall) {
    this._call = call;
  }
}

export class SetNftPerAddressLimitCall extends ethereum.Call {
  get inputs(): SetNftPerAddressLimitCall__Inputs {
    return new SetNftPerAddressLimitCall__Inputs(this);
  }

  get outputs(): SetNftPerAddressLimitCall__Outputs {
    return new SetNftPerAddressLimitCall__Outputs(this);
  }
}

export class SetNftPerAddressLimitCall__Inputs {
  _call: SetNftPerAddressLimitCall;

  constructor(call: SetNftPerAddressLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftPerAddressLimitCall__Outputs {
  _call: SetNftPerAddressLimitCall;

  constructor(call: SetNftPerAddressLimitCall) {
    this._call = call;
  }
}

export class SetNftPerPRLimitCall extends ethereum.Call {
  get inputs(): SetNftPerPRLimitCall__Inputs {
    return new SetNftPerPRLimitCall__Inputs(this);
  }

  get outputs(): SetNftPerPRLimitCall__Outputs {
    return new SetNftPerPRLimitCall__Outputs(this);
  }
}

export class SetNftPerPRLimitCall__Inputs {
  _call: SetNftPerPRLimitCall;

  constructor(call: SetNftPerPRLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftPerPRLimitCall__Outputs {
  _call: SetNftPerPRLimitCall;

  constructor(call: SetNftPerPRLimitCall) {
    this._call = call;
  }
}

export class SetNotRevealedURICall extends ethereum.Call {
  get inputs(): SetNotRevealedURICall__Inputs {
    return new SetNotRevealedURICall__Inputs(this);
  }

  get outputs(): SetNotRevealedURICall__Outputs {
    return new SetNotRevealedURICall__Outputs(this);
  }
}

export class SetNotRevealedURICall__Inputs {
  _call: SetNotRevealedURICall;

  constructor(call: SetNotRevealedURICall) {
    this._call = call;
  }

  get _notRevealedURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNotRevealedURICall__Outputs {
  _call: SetNotRevealedURICall;

  constructor(call: SetNotRevealedURICall) {
    this._call = call;
  }
}

export class SetOnlyWhitelistedCall extends ethereum.Call {
  get inputs(): SetOnlyWhitelistedCall__Inputs {
    return new SetOnlyWhitelistedCall__Inputs(this);
  }

  get outputs(): SetOnlyWhitelistedCall__Outputs {
    return new SetOnlyWhitelistedCall__Outputs(this);
  }
}

export class SetOnlyWhitelistedCall__Inputs {
  _call: SetOnlyWhitelistedCall;

  constructor(call: SetOnlyWhitelistedCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOnlyWhitelistedCall__Outputs {
  _call: SetOnlyWhitelistedCall;

  constructor(call: SetOnlyWhitelistedCall) {
    this._call = call;
  }
}

export class Set_PRCall extends ethereum.Call {
  get inputs(): Set_PRCall__Inputs {
    return new Set_PRCall__Inputs(this);
  }

  get outputs(): Set_PRCall__Outputs {
    return new Set_PRCall__Outputs(this);
  }
}

export class Set_PRCall__Inputs {
  _call: Set_PRCall;

  constructor(call: Set_PRCall) {
    this._call = call;
  }
}

export class Set_PRCall__Outputs {
  _call: Set_PRCall;

  constructor(call: Set_PRCall) {
    this._call = call;
  }
}

export class Set_bankCall extends ethereum.Call {
  get inputs(): Set_bankCall__Inputs {
    return new Set_bankCall__Inputs(this);
  }

  get outputs(): Set_bankCall__Outputs {
    return new Set_bankCall__Outputs(this);
  }
}

export class Set_bankCall__Inputs {
  _call: Set_bankCall;

  constructor(call: Set_bankCall) {
    this._call = call;
  }

  get bank_receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_bankCall__Outputs {
  _call: Set_bankCall;

  constructor(call: Set_bankCall) {
    this._call = call;
  }
}

export class Set_bank2Call extends ethereum.Call {
  get inputs(): Set_bank2Call__Inputs {
    return new Set_bank2Call__Inputs(this);
  }

  get outputs(): Set_bank2Call__Outputs {
    return new Set_bank2Call__Outputs(this);
  }
}

export class Set_bank2Call__Inputs {
  _call: Set_bank2Call;

  constructor(call: Set_bank2Call) {
    this._call = call;
  }

  get bank_receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_bank2Call__Outputs {
  _call: Set_bank2Call;

  constructor(call: Set_bank2Call) {
    this._call = call;
  }
}

export class SetmaxMintAmountCall extends ethereum.Call {
  get inputs(): SetmaxMintAmountCall__Inputs {
    return new SetmaxMintAmountCall__Inputs(this);
  }

  get outputs(): SetmaxMintAmountCall__Outputs {
    return new SetmaxMintAmountCall__Outputs(this);
  }
}

export class SetmaxMintAmountCall__Inputs {
  _call: SetmaxMintAmountCall;

  constructor(call: SetmaxMintAmountCall) {
    this._call = call;
  }

  get _newmaxMintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetmaxMintAmountCall__Outputs {
  _call: SetmaxMintAmountCall;

  constructor(call: SetmaxMintAmountCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class Update_whitelistCall extends ethereum.Call {
  get inputs(): Update_whitelistCall__Inputs {
    return new Update_whitelistCall__Inputs(this);
  }

  get outputs(): Update_whitelistCall__Outputs {
    return new Update_whitelistCall__Outputs(this);
  }
}

export class Update_whitelistCall__Inputs {
  _call: Update_whitelistCall;

  constructor(call: Update_whitelistCall) {
    this._call = call;
  }

  get temp_add_1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get temp_add_2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Update_whitelistCall__Outputs {
  _call: Update_whitelistCall;

  constructor(call: Update_whitelistCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
